.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_GET0_PEER_RPK 3ossl"
.TH SSL_GET0_PEER_RPK 3ossl "2024-05-28" "3.3.0-dev" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_add_expected_rpk,
SSL_get_negotiated_client_cert_type,
SSL_get_negotiated_server_cert_type,
SSL_get0_peer_rpk,
SSL_SESSION_get0_peer_rpk \- raw public key (RFC7250) support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& int SSL_add_expected_rpk(SSL *s, EVP_PKEY *rpk);
\& int SSL_get_negotiated_client_cert_type(const SSL *s);
\& int SSL_get_negotiated_server_cert_type(const SSL *s);
\& EVP_PKEY *SSL_get0_peer_rpk(const SSL *s);
\& EVP_PKEY *SSL_SESSION_get0_peer_rpk(const SSL_SESSION *ss);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSSL_add_expected_rpk()\fR adds a \s-1DANE TLSA\s0 record matching public key \fBrpk\fR
to \s-1SSL\s0 \fBs\fR's \s-1DANE\s0 validation policy.
.PP
\&\fBSSL_get_negotiated_client_cert_type()\fR returns the connection's negotiated
client certificate type.
.PP
\&\fBSSL_get_negotiated_server_cert_type()\fR returns the connection's negotiated
server certificate type.
.PP
\&\fBSSL_get0_peer_rpk()\fR returns the peer's raw public key from \s-1SSL\s0 \fBs\fR.
.PP
\&\fBSSL_SESSION_get0_peer_rpk()\fR returns the peer's raw public key from
\&\s-1SSL_SESSION\s0 \fBss\fR.
.SH "NOTES"
.IX Header "NOTES"
Raw public keys are used in place of certificates when the option is
negotiated.
\&\fB\fBSSL_add_expected_rpk()\fB\fR may be called multiple times to configure
multiple trusted keys, this makes it possible to allow for key rotation,
where a peer might be expected to offer an \*(L"old\*(R" or \*(L"new\*(R" key and the
endpoint must be able to accept either one.
.PP
When raw public keys are used, the certificate verify callback is called, and
may be used to inspect the public key via \fBX509_STORE_CTX_get0_rpk\fR\|(3).
Raw public keys have no subject, issuer, validity dates nor digital signature
to verify. They can, however, be matched verbatim or by their digest value, this
is done by specifying one or more \s-1TLSA\s0 records, see \fBSSL_CTX_dane_enable\fR\|(3).
.PP
The raw public key is typically taken from the certificate assigned to the
connection (e.g. via \fBSSL_use_certificate\fR\|(3)), but if a certificate is not
configured, then the public key will be extracted from the assigned
private key.
.PP
The \fBSSL_add_expected_rpk()\fR function is a wrapper around
\&\fBSSL_dane_tlsa_add\fR\|(3).
When \s-1DANE\s0 is enabled via \fBSSL_dane_enable\fR\|(3), the configured \s-1TLSA\s0 records
will be used to validate the peer's public key or certificate.
If \s-1DANE\s0 is not enabled, then no validation will occur.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBSSL_add_expected_rpk()\fR returns 1 on success and 0 on failure.
.PP
\&\fBSSL_get0_peer_rpk()\fR and \fBSSL_SESSION_get0_peer_rpk()\fR return the peer's raw
public key as an \s-1EVP_PKEY\s0 or \s-1NULL\s0 when the raw public key is not available.
.PP
\&\fBSSL_get_negotiated_client_cert_type()\fR and \fBSSL_get_negotiated_server_cert_type()\fR
return one of the following values:
.IP "TLSEXT_cert_type_x509" 4
.IX Item "TLSEXT_cert_type_x509"
.PD 0
.IP "TLSEXT_cert_type_rpk" 4
.IX Item "TLSEXT_cert_type_rpk"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSSL_CTX_dane_enable\fR\|(3),
\&\fBSSL_CTX_set_options\fR\|(3),
\&\fBSSL_dane_enable\fR\|(3),
\&\fBSSL_get_verify_result\fR\|(3),
\&\fBSSL_set_verify\fR\|(3),
\&\fBSSL_use_certificate\fR\|(3),
\&\fBX509_STORE_CTX_get0_rpk\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
These functions were added in OpenSSL 3.2.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2023 The OpenSSL Project Authors. All Rights Reserved.
