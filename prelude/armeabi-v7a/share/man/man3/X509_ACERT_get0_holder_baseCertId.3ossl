.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_ACERT_GET0_HOLDER_BASECERTID 3ossl"
.TH X509_ACERT_GET0_HOLDER_BASECERTID 3ossl "2024-08-12" "3.4.0-dev" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_ACERT_get0_holder_baseCertId,
X509_ACERT_get0_holder_digest,
X509_ACERT_get0_holder_entityName,
X509_ACERT_set0_holder_baseCertId,
X509_ACERT_set0_holder_digest,
X509_ACERT_set0_holder_entityName,
OSSL_ISSUER_SERIAL_get0_issuer,
OSSL_ISSUER_SERIAL_get0_issuerUID,
OSSL_ISSUER_SERIAL_get0_serial,
OSSL_ISSUER_SERIAL_set1_issuer,
OSSL_ISSUER_SERIAL_set1_issuerUID,
OSSL_ISSUER_SERIAL_set1_serial,
OSSL_OBJECT_DIGEST_INFO_get0_digest,
OSSL_OBJECT_DIGEST_INFO_set1_digest \- get and set Attribute Certificate holder fields
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/x509_acert.h>
\&
\& const GENERAL_NAMES *X509_ACERT_get0_holder_entityName(const X509_ACERT *x);
\& OSSL_ISSUER_SERIAL *X509_ACERT_get0_holder_baseCertId(const X509_ACERT *x);
\& OSSL_OBJECT_DIGEST_INFO * X509_ACERT_get0_holder_digest(const X509_ACERT *x);
\& void X509_ACERT_set0_holder_entityName(X509_ACERT *x, GENERAL_NAMES *name);
\& void X509_ACERT_set0_holder_baseCertId(X509_ACERT *x, OSSL_ISSUER_SERIAL *isss);
\& void X509_ACERT_set0_holder_digest(X509_ACERT *x,
\&                                    OSSL_OBJECT_DIGEST_INFO *dinfo);
\&
\& X509_NAME *OSSL_ISSUER_SERIAL_get0_issuer(OSSL_ISSUER_SERIAL *isss);
\& ASN1_INTEGER *OSSL_ISSUER_SERIAL_get0_serial(OSSL_ISSUER_SERIAL *isss);
\& ASN1_BIT_STRING *OSSL_ISSUER_SERIAL_get0_issuerUID(OSSL_ISSUER_SERIAL *isss);
\& int OSSL_ISSUER_SERIAL_set1_issuer(OSSL_ISSUER_SERIAL *isss, X509_NAME *issuer);
\& int OSSL_ISSUER_SERIAL_set1_serial(OSSL_ISSUER_SERIAL *isss, ASN1_INTEGER *serial);
\& int OSSL_ISSUER_SERIAL_set1_issuerUID(OSSL_ISSUER_SERIAL *isss, ASN1_BIT_STRING *uid);
\&
\& void OSSL_OBJECT_DIGEST_INFO_get0_digest(OSSL_OBJECT_DIGEST_INFO *o,
\&                                          ASN1_ENUMERATED **digestedObjectType,
\&                                          X509_ALGOR **digestAlgorithm,
\&                                          ASN1_BIT_STRING **digest);
\& void OSSL_OBJECT_DIGEST_INFO_set1_digest(OSSL_OBJECT_DIGEST_INFO *o,
\&                                          ASN1_ENUMERATED *digestedObjectType,
\&                                          X509_ALGOR *digestAlgorithm,
\&                                          ASN1_BIT_STRING *digest);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These routines set and get the holder identity of an X509 attribute certificate.
.PP
\&\fBX509_ACERT_set0_holder_entityName()\fR sets the identity as a \fB\s-1GENERAL_NAME\s0\fR
\&\fIname\fR, \fBX509_ACERT_set0_holder_baseCertId()\fR sets the identity based on the
issuer and serial number of a certificate detailed in \fIisss\fR and
\&\fBX509_ACERT_set0_holder_digest()\fR sets the holder entity based on digest
information \fIdinfo\fR. Although \s-1RFC 5755\s0 section 4.2.2 recommends that only
one of the above methods be used to set the holder identity for a given
attribute certificate \fIx\fR, setting multiple methods at the same time is
possible.  It is up to the application to handle cases when conflicting
identity information is specified using different methods.
.PP
Pointers to the internal structures describing the holder identity of
attribute certificate \fIx\fR can be retrieved with
\&\fBX509_ACERT_get0_holder_entityName()\fR, \fBX509_ACERT_get0_holder_baseCertId()\fR, and
\&\fBX509_ACERT_get0_holder_digest()\fR.
.PP
A \fB\s-1OSSL_ISSUER_SERIAL\s0\fR object holds the subject name and \s-1UID\s0 of a certificate
issuer and a certificate's serial number.  \fBOSSL_ISSUER_SERIAL_set1_issuer()\fR,
\&\fBOSSL_ISSUER_SERIAL_set1_issuerUID()\fR, and \fBOSSL_ISSUER_SERIAL_set1_serial()\fR
respectively copy these values into the \fB\s-1OSSL_ISSUER_SERIAL\s0\fR structure.
The application is responsible for freeing its own copy of these values after
use.  \fBOSSL_ISSUER_SERIAL_get0_issuer()\fR, \fBOSSL_ISSUER_SERIAL_get0_issuerUID()\fR,
and \fBOSSL_ISSUER_SERIAL_get0_serial()\fR return pointers to these values in the object.
.PP
An \fB\s-1OSSL_OBJECT_DIGEST_INFO\s0\fR object holds a digest of data to identify the
attribute certificate holder.  \fBOSSL_OBJECT_DIGEST_INFO_set1_digest()\fR sets the
digest information of the object.  The type of \fIdigest\fR information is given
by \fIdigestedObjectType\fR and can be one of:
.IP "\s-1OSSL_OBJECT_DIGEST_INFO_PUBLIC_KEY\s0" 4
.IX Item "OSSL_OBJECT_DIGEST_INFO_PUBLIC_KEY"
Hash of a public key
.IP "\s-1OSSL_OBJECT_DIGEST_INFO_PUBLIC_KEY_CERT\s0" 4
.IX Item "OSSL_OBJECT_DIGEST_INFO_PUBLIC_KEY_CERT"
Hash of a public key certificate
.IP "\s-1OSSL_OBJECT_DIGEST_INFO_OTHER\s0" 4
.IX Item "OSSL_OBJECT_DIGEST_INFO_OTHER"
Hash of another object. See \s-1NOTES\s0 below.
.PP
\&\fIdigestAlgorithm\fR indicates the algorithm used to compute \fIdigest\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
All \fIset0\fR/\fIset1\fR routines return 1 for success and 0 for failure.
All \fIget0\fR functions return a pointer to the object's inner structure. These
pointers must not be freed after use.
.SH "NOTES"
.IX Header "NOTES"
Although the value of \fB\s-1OSSL_OBJECT_DIGEST_INFO_OTHER\s0\fR is defined in \s-1RFC 5755,\s0
its use is prohibited for conformant attribute certificates.
.SH "HISTORY"
.IX Header "HISTORY"
These functions were added in OpenSSL 3.4.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2023 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
